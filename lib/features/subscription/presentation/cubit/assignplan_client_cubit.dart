// ==================== CUBIT FILE ====================
// Path: features/subscription/presentation/cubit/assign_plan_cubit.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:taskoteladmin/core/services/firebase.dart';
import 'package:taskoteladmin/features/subscription/domain/model/client_plan_model.dart';
import 'package:taskoteladmin/features/subscription/domain/model/subscription_model.dart';
import 'package:taskoteladmin/features/subscription/presentation/cubit/assignplan_client_state.dart';

class AssignPlanCubit extends Cubit<AssignPlanState> {
  final FirebaseFirestore _firestore;

  AssignPlanCubit({FirebaseFirestore? firestore})
    : _firestore = firestore ?? FirebaseFirestore.instance,
      super(const AssignPlanState());

  // Load subscription plans
  Future<void> loadSubscriptionPlans() async {
    emit(state.copyWith(isLoading: true, errorMessage: null));

    try {
      final querySnapshot = await FBFireStore.subscriptions
          .where('isActive', isEqualTo: true)
          .get();

      final plans = querySnapshot.docs
          .map((doc) => SubscriptionPlanModel.fromDocSnap(doc))
          .toList();

      emit(
        state.copyWith(
          isLoading: false,
          subscriptionPlans: plans,
          activePlans: plans,
        ),
      );
    } catch (e) {
      emit(
        state.copyWith(
          isLoading: false,
          errorMessage: 'Failed to load plans: ${e.toString()}',
        ),
      );
    }
  }

  // Update plan type
  void updatePlanType(String planType) {
    emit(state.copyWith(selectedPlanType: planType, errorMessage: null));
  }

  // Update selected plan
  void updateSelectedPlan(SubscriptionPlanModel? plan) {
    emit(state.copyWith(selectedPlan: plan, errorMessage: null));
  }

  // Update allowed hotels
  void updateAllowedHotels(int count) {
    if (count > 0) {
      emit(state.copyWith(allowedHotels: count, errorMessage: null));
    }
  }

  // Update duration
  void updateDuration(int days) {
    if (days > 0) {
      emit(state.copyWith(duration: days, errorMessage: null));
    }
  }

  // Update redeem start date
  void updateRedeemStartAt(DateTime? date) {
    emit(state.copyWith(redeemStartAt: date, errorMessage: null));
  }

  // Update redeem end date
  void updateRedeemEndAt(DateTime? date) {
    emit(state.copyWith(redeemEndAt: date, errorMessage: null));
  }

  // Assign plan to client
  Future<String?> assignPlanToClient({
    required String clientId,
    required String clientName,
    required String email,
    required String assignedBy,
  }) async {
    if (!state.canAssign) {
      emit(state.copyWith(errorMessage: 'Please fill all required fields'));
      return null;
    }

    emit(state.copyWith(isAssigning: true, errorMessage: null));

    try {
      final clientPlan = ClientPlanModel(
        docId: '', // Will be generated by Firestore
        clientId: clientId,
        clientName: clientName,
        email: email,
        planType: state.selectedPlanType!,
        planId: state.selectedPlan!.docId,
        planDetails: state.selectedPlan!,
        allowedHotels: state.allowedHotels,
        usedHotels: 0,
        duration: state.duration,
        redeemStartAt: state.redeemStartAt,
        redeemEndAt: state.redeemEndAt,
        assignedBy: assignedBy,
        isActive: true,
      );

      final docRef = await _firestore
          .collection('clientPlans')
          .add(clientPlan.toJson());

      emit(
        state.copyWith(
          isAssigning: false,
          successMessage: 'Plan assigned successfully!',
        ),
      );

      return docRef.id;
    } catch (e) {
      emit(
        state.copyWith(
          isAssigning: false,
          errorMessage: 'Failed to assign plan: ${e.toString()}',
        ),
      );
      return null;
    }
  }

  // Reset form
  void resetForm() {
    emit(const AssignPlanState());
  }

  // Clear messages
  void clearMessages() {
    emit(state.copyWith(errorMessage: null, successMessage: null));
  }
}
